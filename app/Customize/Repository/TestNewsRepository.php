<?php

/*
 * This file is part of EC-CUBE
 *
 * Copyright(c) EC-CUBE CO.,LTD. All Rights Reserved.
 *
 * http://www.ec-cube.co.jp/
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Customize\Repository;

use Customize\Entity\TestHello;
use Symfony\Bridge\Doctrine\RegistryInterface;
use Eccube\Repository\AbstractRepository;

/**
 * CustomizeProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TestNewsRepository extends AbstractRepository
{
    /**
     * CustomizeProductRepository constructor.
     *
     * @param RegistryInterface $registry
     */
    public function __construct(RegistryInterface $registry)
    {
        parent::__construct($registry, TestHello::class);
    }
    /**
     * 追加
     *
     * @param string $title
     *
     * @return TestHello
     */
    public function customAdd($title)
    {
        if (empty($title)){
          return false;
        }
        $TestHello = new TestHello();#Entityを初期化
        $TestHello->setTitle($title);

        $em = $this->getEntityManager();
        $em->persist($TestHello);//永続化対象のエンティティを設定
        $em->flush($TestHello);//永続化

        return true;
    }

    /**
     * 更新
     *
     * @param integer $testId
     * @param string $title
     *
     * @return TestHello|null
     */
    public function customUpdate($testId, $title)
    {
        if (empty($title)){
          return null;
        }
        $id = intVal($testId);
        $TestHello = $this->find($id);#Entityを検索
        $TestHello->setTitle($title);

        $em = $this->getEntityManager();
        $em->persist($TestHello);//永続化対象のエンティティを設定
        $em->flush($TestHello);//永続化

        return true;
    }

    /**
     * 削除
     *
     * @param integer $testId
     * @param string $title
     *
     * @return TestHello
     */
    public function customDelete($testId)
    {
        $id = intVal($testId);
        $TestHello = $this->find($id);
        if (empty($TestHello)){
          return false;
        }
        $em = $this->getEntityManager();
        $em->remove($TestHello);//Entityを削除状態にする
        $em->flush($TestHello);//状態をDBに反映

        return true;
    }
}
